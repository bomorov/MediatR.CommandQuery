project:
  namespace: 'MediatR.CommandQuery.EntityFrameworkCore.SqlServer.Tests'
  directory: .\
database:
  connectionString: Data Source=.\SQL2019;Initial Catalog=TrackerCommandQuery;Integrated Security=True
data:
  context:
    name: 'TrackerContext'
    baseClass: DbContext
    namespace: '{Project.Namespace}.Data'
    directory: '{Project.Directory}\Data'
  entity:
    namespace: '{Project.Namespace}.Data.Entities'
    directory: '{Project.Directory}\Data\Entities'
  mapping:
    namespace: '{Project.Namespace}.Data.Mapping'
    directory: '{Project.Directory}\Data\Mapping'
  query:
    generate: true
    indexPrefix: By
    uniquePrefix: GetBy
    namespace: '{Project.Namespace}.Data.Queries'
    directory: '{Project.Directory}\Data\Queries'
model:
  shared:
    namespace: '{Project.Namespace}.Domain.Models'
    directory: '{Project.Directory}\Domain\{Entity.Name}\Models'
    exclude:
      entities:
        - 'UserRole'
      properties:
        - '\.Id$'
        - '\.Created$'
        - '\.CreatedBy$'
        - '\.Updated$'
        - '\.UpdatedBy$'
        - '\.RowVersion$'
  read:
    generate: true
    name: '{Entity.Name}ReadModel'
    baseClass: EntityReadModel
  create:
    generate: true
    name: '{Entity.Name}CreateModel'
    baseClass: EntityCreateModel
    exclude:
      entities:
        - 'UserLogin'
  update:
    generate: true
    name: '{Entity.Name}UpdateModel'
    baseClass: EntityUpdateModel
    exclude:
      entities:
        - 'UserLogin'
  mapper:
    generate: true
    name: '{Entity.Name}Profile'
    baseClass: AutoMapper.Profile
    namespace: '{Project.Namespace}.Domain.Mapping'
    directory: '{Project.Directory}\Domain\{Entity.Name}\Mapping'
  validator:
    generate: true
    name: '{Model.Name}Validator'
    baseClass: 'AbstractValidator<{Model.Name}>'
    namespace: '{Project.Namespace}.Domain.Validation'
    directory: '{Project.Directory}\Domain\{Entity.Name}\Validation'
